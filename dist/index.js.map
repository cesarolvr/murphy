{"version":3,"sources":["core/config.js","index.js"],"names":["config","LEFT_TO_RIGHT","RIGHT_TO_LEFT","TOP_TO_BOTTOM","BOTTOM_TO_TOP","MURPHY_SELECTOR","APPEARANCE_DISTANCE_DEFAULT","ELEMENT_DISTANCE_DEFAULT","EASE_DEFAULT","ANIMATION_DELAY_DEFAULT","THRESHOLD_DEFAULT","ANIMATION_DURATION_DEFAULT","play","murphyWillWork","document","querySelectorAll","forEach","element","startAnimation","cancel","style","opacity","animate","duration","fill","reset","animationType","dataset","murphy","appearanceDistance","murphyAppearanceDistance","elementDistance","murphyElementDistance","ease","murphyEase","delay","parseInt","murphyAnimationDelay","elementThreshold","murphyElementThreshold","animationDuration","murphyAnimationDuration","observerOptions","threshold","rootMargin","generateIntersectionObserver","elementOptions","observer","IntersectionObserver","entries","entry","intersectionRatio","generateAnimate","unobserve","target","observe","options","getAnimationType","easing","animations","transform","observerIsSupported","window","IntersectionObserverEntry","prototype","animationIsSupported","Animation"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const config = {\n  LEFT_TO_RIGHT: \"left-to-right\",\n  RIGHT_TO_LEFT: \"right-to-left\",\n  TOP_TO_BOTTOM: \"top-to-bottom\",\n  BOTTOM_TO_TOP: \"bottom-to-top\",\n  MURPHY_SELECTOR: \"[data-murphy]\",\n  APPEARANCE_DISTANCE_DEFAULT: 50,\n  ELEMENT_DISTANCE_DEFAULT: 30,\n  EASE_DEFAULT: 'ease',\n  ANIMATION_DELAY_DEFAULT: 300,\n  THRESHOLD_DEFAULT: 1,\n  ANIMATION_DURATION_DEFAULT: 300,\n};\n\nexport default config;\n\n","import config from \"./core/config.js\";\n\nconst {\n  LEFT_TO_RIGHT,\n  RIGHT_TO_LEFT,\n  TOP_TO_BOTTOM,\n  BOTTOM_TO_TOP,\n  MURPHY_SELECTOR,\n  APPEARANCE_DISTANCE_DEFAULT,\n  ELEMENT_DISTANCE_DEFAULT,\n  EASE_DEFAULT,\n  ANIMATION_DELAY_DEFAULT,\n  THRESHOLD_DEFAULT,\n  ANIMATION_DURATION_DEFAULT,\n} = config;\n\nconst play = () => {\n  if (!murphyWillWork()) return cancel();\n  const elements = document.querySelectorAll(MURPHY_SELECTOR);\n\n  return elements.forEach(element => {\n    startAnimation(element);\n  });\n};\n\nconst cancel = () => {\n  const elements = document.querySelectorAll(MURPHY_SELECTOR);\n  elements.forEach(element => {\n    element.style.opacity = 1;\n    element.animate &&\n      element.animate([{ opacity: \"1\" }, { opacity: \"1\" }], {\n        duration: 1,\n        fill: \"forwards\"\n      });\n  });\n};\n\nconst reset = () => {\n  const elements = document.querySelectorAll(MURPHY_SELECTOR);\n  elements.forEach(element => {\n    element.style.opacity = 0;\n    element.animate &&\n      element.animate([{ opacity: \"0\" }, { opacity: \"0\" }], {\n        duration: 1,\n        fill: \"forwards\"\n      });\n  });\n};\n\nconst startAnimation = element => {\n  const animationType = element.dataset.murphy || BOTTOM_TO_TOP;\n  const appearanceDistance = element.dataset.murphyAppearanceDistance || APPEARANCE_DISTANCE_DEFAULT;\n  const elementDistance = element.dataset.murphyElementDistance || ELEMENT_DISTANCE_DEFAULT;\n  const ease = element.dataset.murphyEase || EASE_DEFAULT;\n  const delay = parseInt(element.dataset.murphyAnimationDelay) || ANIMATION_DELAY_DEFAULT;\n  const elementThreshold =\n    parseInt(element.dataset.murphyElementThreshold) || THRESHOLD_DEFAULT;\n  const animationDuration =\n    parseInt(element.dataset.murphyAnimationDuration) || ANIMATION_DURATION_DEFAULT;\n\n  const observerOptions = {\n    threshold: elementThreshold,\n    rootMargin: `0px 0px ${appearanceDistance * -1}px 0px`\n  };\n\n  const elementOptions = {\n    element,\n    animationType,\n    animationDuration,\n    elementDistance,\n    ease,\n    delay\n  };\n\n  generateIntersectionObserver({ elementOptions, observerOptions });\n};\n\nconst generateIntersectionObserver = ({ elementOptions, observerOptions }) => {\n  \n  const element = elementOptions.element;\n  const animationType = elementOptions.animationType;\n  \n  const observer = new IntersectionObserver(\n    entries => {\n      entries.forEach(entry => {\n        const { intersectionRatio } = entry;\n        if (intersectionRatio > 0) {\n          generateAnimate(elementOptions, animationType);\n          observer.unobserve(entry.target);\n        }\n      });\n    },\n    {\n      observerOptions,\n    }\n  );\n  observer.observe(element);\n};\n\nconst generateAnimate = (elementOptions, animationType) => {\n  const animationDuration = elementOptions.animationDuration;\n  const delay = elementOptions.delay;\n  const element = elementOptions.element;\n  const elementDistance = elementOptions.elementDistance;\n  const ease = elementOptions.ease;\n\n  const options = {\n    elementDistance\n  };\n\n  if (!element.animate) return cancel();\n  element.animate(getAnimationType(animationType, options), {\n    duration: animationDuration,\n    fill: \"forwards\",\n    easing: ease,\n    delay\n  });\n};\n\nconst getAnimationType = (animationType = BOTTOM_TO_TOP, options) => {\n  const animations = {\n    [BOTTOM_TO_TOP]: [\n      { opacity: \"0\", transform: `translateY(${options.elementDistance}px)` },\n      { opacity: \"1\", transform: \"translateY(0px)\" }\n    ],\n    [TOP_TO_BOTTOM]: [\n      {\n        opacity: \"0\",\n        transform: `translateY(-${options.elementDistance}px)`\n      },\n      { opacity: \"1\", transform: \"translateY(0px)\" }\n    ],\n    [LEFT_TO_RIGHT]: [\n      {\n        opacity: \"0\",\n        transform: `translateX(-${options.elementDistance}px)`\n      },\n      { opacity: \"1\", transform: \"translateX(0px)\" }\n    ],\n    [RIGHT_TO_LEFT]: [\n      { opacity: \"0\", transform: `translateX(${options.elementDistance}px)` },\n      { opacity: \"1\", transform: \"translateX(0px)\" }\n    ]\n  };\n\n  return animations[animationType];\n};\n\nconst observerIsSupported = () => {\n  return !!(\n    window.IntersectionObserver &&\n    \"IntersectionObserver\" in window &&\n    \"IntersectionObserverEntry\" in window &&\n    \"intersectionRatio\" in window.IntersectionObserverEntry.prototype\n  );\n};\n\nconst animationIsSupported = () => {\n  return !!window.Animation;\n};\n\nconst murphyWillWork = () => {\n  return animationIsSupported() && observerIsSupported();\n};\n\nwindow.murphy = { play, cancel, reset };\nexport default { play, cancel, reset };\n"]}