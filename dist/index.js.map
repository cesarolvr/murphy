{"version":3,"sources":["core/config.js","index.js"],"names":["config","LEFT_TO_RIGHT","RIGHT_TO_LEFT","TOP_TO_BOTTOM","BOTTOM_TO_TOP","MURPHY_SELECTOR","play","murphyWillWorks","document","querySelectorAll","forEach","element","startAnimation","cancel","style","opacity","reset","animate","duration","fill","console","log","animationType","dataset","murphy","appearanceDistance","murphyAppearanceDistance","elementDistance","murphyElementDistance","ease","murphyEase","delay","parseInt","murphyAnimationDelay","elementThreshold","murphyElementThreshold","animationDuration","murphyAnimationDuration","observerOptions","threshold","rootMargin","generateIntersectionObserver","elementOptions","observer","IntersectionObserver","entries","entry","intersectionRatio","generateAnimate","unobserve","target","observe","options","getAnimationType","easing","animations","transform","observerIsSupported","window","IntersectionObserverEntry","prototype","animationIsSupported","Animation"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const config = {\n  LEFT_TO_RIGHT: \"left-to-right\",\n  RIGHT_TO_LEFT: \"right-to-left\",\n  TOP_TO_BOTTOM: \"top-to-bottom\",\n  BOTTOM_TO_TOP: \"bottom-to-top\",\n  MURPHY_SELECTOR: \"[data-murphy]\"\n};\n\nexport default config;\n","import config from \"./core/config.js\";\n\nconst {\n  LEFT_TO_RIGHT,\n  RIGHT_TO_LEFT,\n  TOP_TO_BOTTOM,\n  BOTTOM_TO_TOP,\n  MURPHY_SELECTOR\n} = config;\n\nconst play = () => {\n  if (murphyWillWorks()) {\n    var elements = document.querySelectorAll(MURPHY_SELECTOR);\n\n    return elements.forEach(element => {\n      startAnimation(element);\n    });\n  } else {\n    return cancel();\n  }\n};\n\nconst cancel = () => {\n  var elements = document.querySelectorAll(MURPHY_SELECTOR);\n  elements.forEach(element => {\n    element.style.opacity = 1;\n  });\n};\n\nconst reset = () => {\n  var elements = document.querySelectorAll(MURPHY_SELECTOR);\n  elements.forEach(element => {\n    element.style.opacity = 0;\n    if (element.animate) {\n      element.animate([{ opacity: \"0\" }, { opacity: \"0\" }], {\n        duration: 1,\n        fill: \"forwards\"\n      });\n    }\n  });\n};\n\nconst startAnimation = element => {\n  console.log(element)\n  var animationType = element.dataset.murphy || BOTTOM_TO_TOP;\n  var appearanceDistance = element.dataset.murphyAppearanceDistance || 50;\n  var elementDistance = element.dataset.murphyElementDistance || 30;\n  var ease = element.dataset.murphyEase || \"ease\";\n  var delay = parseInt(element.dataset.murphyAnimationDelay) || 300;\n  var elementThreshold = parseInt(element.dataset.murphyElementThreshold) || 1;\n  var animationDuration =\n    parseInt(element.dataset.murphyAnimationDuration) || 300;\n\n  var observerOptions = {\n    threshold: 1,\n    rootMargin: `0px 0px ${appearanceDistance * -1}px 0px`\n  };\n\n  var elementOptions = {\n    element,\n    animationType,\n    animationDuration,\n    elementDistance,\n    elementThreshold,\n    ease,\n    delay\n  };\n\n  generateIntersectionObserver({ elementOptions, observerOptions });\n};\n\nconst generateIntersectionObserver = ({ elementOptions, observerOptions }) => {\n  const element = elementOptions.element;\n  const animationType = elementOptions.animationType;\n  const threshold = observerOptions.elementThreshold;\n\n  const observer = new IntersectionObserver(\n    entries => {\n      entries.forEach(entry => {\n        var { intersectionRatio } = entry;\n        if (intersectionRatio > 0) {\n          generateAnimate(elementOptions, animationType);\n          observer.unobserve(entry.target);\n        }\n      });\n    },\n    {\n      ...observerOptions,\n      threshold\n    }\n  );\n  observer.observe(element);\n};\n\nconst generateAnimate = (elementOptions, animationType) => {\n  const animationDuration = elementOptions.animationDuration;\n  const delay = elementOptions.delay;\n  const element = elementOptions.element;\n  const elementDistance = elementOptions.elementDistance;\n  const ease = elementOptions.ease;\n\n  const options = {\n    elementDistance\n  };\n\n  if (element.animate) {\n    element.animate(getAnimationType(animationType, options), {\n      duration: animationDuration,\n      fill: \"forwards\",\n      easing: ease,\n      delay\n    });\n  } else {\n    cancel();\n  }\n};\n\nconst getAnimationType = (animationType = BOTTOM_TO_TOP, options) => {\n  const animations = {\n    [BOTTOM_TO_TOP]: [\n      { opacity: \"0\", transform: `translateY(${options.elementDistance}px)` },\n      { opacity: \"1\", transform: \"translateY(0px)\" }\n    ],\n    [TOP_TO_BOTTOM]: [\n      {\n        opacity: \"0\",\n        transform: `translateY(-${options.elementDistance}px)`\n      },\n      { opacity: \"1\", transform: \"translateY(0px)\" }\n    ],\n    [LEFT_TO_RIGHT]: [\n      {\n        opacity: \"0\",\n        transform: `translateX(-${options.elementDistance}px)`\n      },\n      { opacity: \"1\", transform: \"translateX(0px)\" }\n    ],\n    [RIGHT_TO_LEFT]: [\n      { opacity: \"0\", transform: `translateX(${options.elementDistance}px)` },\n      { opacity: \"1\", transform: \"translateX(0px)\" }\n    ]\n  };\n\n  return animations[animationType];\n};\n\nconst observerIsSupported = () => {\n  if (\n    window.IntersectionObserver &&\n    \"IntersectionObserver\" in window &&\n    \"IntersectionObserverEntry\" in window &&\n    \"intersectionRatio\" in window.IntersectionObserverEntry.prototype\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst animationIsSupported = () => {\n  if (window.Animation) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst murphyWillWorks = () => {\n  return animationIsSupported() && observerIsSupported();\n};\n\nwindow.murphy = { play, cancel, reset };\nexport default { play, cancel, reset };\n"]}